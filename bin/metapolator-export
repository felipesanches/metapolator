#!/bin/sh
__hash_bang_trick=/* exec /usr/bin/env node --harmony "$0" "$@"  # -*- mode: javascript; -*- */undefined

"use strict";

exports.command = {
    description: 'Export one or more masters to UFO'
    // \xA0 is a non breakable space, to create a good --help string while
    // outsmarting the command parser of commander
  , arguments: '<[project/]master> <ufo> [master\xA0ufo] ...'
};

var path = require('path');
var requirejs = require('requirejs');
require('rootpath')();
requirejs.config(require('config'));

if (require.main === module) {
    requirejs([
        'commander'
      , 'metapolator/parseArgs'
      , 'ufojs/tools/io/staticNodeJS'
      , 'metapolator/project/MetapolatorProject'
    ], function (
        program
      , parseArgs
      , io
      , MetapolatorProject
) {
        program._name = path.basename(process.argv[1]).replace('-', ' ');
        program.arguments(exports.command.arguments)
        .description(exports.command.description)
        .action(function(projectMaster, instance/* , master, instance ...*/) {
            var masterInstancePairs = parseArgs.masterInstancePairs(
                                Array.prototype.slice.call(arguments, 2))
              , pm = parseArgs.projectMaster(io, projectMaster)
              , project = pm[0]
              , master = pm[1]
              ;
            project.load();
            // load all masters, because right now it is very confusing
            // when some masters are missing from the MOM
            project.masters.forEach(project.open, project);

            masterInstancePairs.unshift(master, instance)
            while(true) {
                master = masterInstancePairs.shift();
                instance = masterInstancePairs.shift();
                console.warn('Exporting "'+master+'" to "'+instance+'"');

                if (instance.slice(-4) === '.zip'){
                    project.exportZipInstance(master, instance, program.precision);
                } else {
                    project.exportInstance(project._io, master, instance, program.precision);
                }
                if(!masterInstancePairs.length) break;
            }
        })
        .option('-p, --precision <n>', 'The number of decimal places to use in output coordinates, '
                                     + 'or -1 for no rounding',
                parseInt);
        program.parse(process.argv);
    }
)}
